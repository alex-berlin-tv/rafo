{% extends "base.html.jinja2" %}
{% block content %}
<div class="content" x-data="data()" x-init="fetch_data()">
    <div class="notification is-warning" x-show="!data_loaded && !fetch_error">
        Bitte warten, die Daten werden geladen...
    </div>
    <div :class="['modal', success ? 'is-active' : '']" x-show="true">
        <div class="modal-background" @click="success=false"></div>
        <div class="modal-content">
            <div class="notification is-primary">
                <p><b>Upload erfolgreich abgeschlossen</b></p>
                <p>Wir haben deine Sendung erhalten, vielen Dank! Du wirst in Kürze eine Bestätigung per Mail erhalten
                    (bitte schau auch im Spamordner nach).</p>
            </div>
        </div>
        <button class="modal-close is-large" aria-label="close" @click="success=false"></button>
    </div>
    <template x-if="fetch_error">
        <div class="notification is-danger" x-show="fetch_error">
            <p><b>Formular konnte nicht geladen werden (Fehler <span x-text="fetch_error.status"></span>)</b>
            </p>
            <p>Unter dieser URL kann kein Formular gefunden werden. Stelle bitte sicher, dass du den Link
                korrekt
                kopiert hast und probiere es nochmals. Wenn das Problem fortbesteht und du dir sicher bist, dass
                du den
                korrekten Link verwendest, melde dich bitte unter <a
                    href="mailto:sendeabwicklung@alex-berlin.de">sendeabwicklung@alex-berlin.de</a>. Bitte
                kopiere in
                diese Nachricht die komplette Fehlermeldung (alles aus der roten Box), damit wir dir helfen
                können.</p>
            <p class="is-size-7">Fehlergrund: <span x-text="fetch_error_detail"></span>. Id: <span
                    x-text="producer_uuid"></span>.</p>
        </div>
    </template>

    <div x-show="data_loaded && !fetch_error && maintenance_mode">
        <article class="message is-warning">
            <div class="message-header">
                <p>Wartungsmodus</p>
            </div>
            <div class="message-body" x-text="maintenance_message">
            </div>
        </article>
    </div>

    <div x-show="data_loaded && !fetch_error && !maintenance_mode">
        <h1>Uploadformular</h1>
        <form id="form" enctype="multipart/form-data" @submit="upload()">
            <template x-if="dev_mode">
                <div class="field">
                    <div class="control">
                        <button class="button is-link is-light" @click="test_fill()">Testdaten</button>
                    </div>
                </div>
            </template>
            <div class="field">
                <label class="label" for="producer">Sendeverantwortlich</label>
                <div class="control has-icons-left">
                    <input class="input" id="producer" name="producer" type="text" x-model="producer_name" disabled>
                    <span class="icon is-small is-left"><i class="fa-regular fa-user"></i></span>
                </div>
                <p class="help">Dieses Feld ist nicht veränderbar und stellt die verantwortliche Person da, die bei uns
                    im System hinterlegt ist.</p>
            </div>
            <div class="field">
                <label class="label" for="show">Format</label>
                <div class="control has-icons-left">
                    <div class="select">
                        <select x-model="show" id="show" name="show" required :disabled="upload_running"
                            @change="auto_set_title()">
                            <template x-if="available_shows.length > 1">
                                <option disabled selected value="">Format auswählen</option>
                            </template>
                            <template x-for="show in available_shows">
                                <option :value="show.uuid" x-text="show.name"></option>
                            </template>
                            <p class="help">Wähle bitte das Format aus.</p>
                        </select>
                    </div>
                    <div class="icon is-small is-left"><i class="fa-solid fa-tower-broadcast"></i></div>
                </div>
            </div>
            <div class="field">
                <label class="label" for="datetime">Geplantes Sendedatum- und Zeit</label>
                <div class="control has-icons-left">
                    <input class="input" id="datetime" name="datetime" type="datetime-local" x-model="datetime" required
                        :disabled="upload_running" :min="get_min_datetime()" :max="get_max_datetime()"
                        @change="auto_set_title()">
                    <div class="icon is-small is-left"><i class="fa-solid fa-calendar-days"></i></div>
                </div>
                <p class="help">Trage hier die Sendezeit der Erstausstrahlung ein. Sollte dir diese nicht bekannt sein
                    wende dich bitte an
                    deine Bezugsperson bei ALEX Berlin oder direkt an <a
                        href="mailto:dispo@alex-berlin.de">dispo@alex-berlin.de</a> bevor du die Datei hochlädst.
                    <i>Pflichtfeld.</i>
                </p>
            </div>
            <div class="field">
                <label class="label" for="title">Sendungstitel</label>
                <div class="control has-icons-left">
                    <input class="input" id="title" name="title" type="text" x-model="title" minlength="8"
                        maxlength="200" :disabled="upload_running" @input="title_changed_manually = true">
                    <div class="icon is-small is-left"><i class="fa-solid fa-pen"></i></div>
                </div>
                <p class="help">Der Titel deiner Episode. Dieses Feld bestimmt, wie die Sendung öffentlich in der
                    Mediathek heißt. Idealerweise ist dies der Formatname und bei Bedarf eine Ergänzung um Folgennummer
                    oder Thema. <i>Pflichtfeld, zwischen 8 und 200 Zeichen lang</i>.
                </p>
            </div>
            <div class="field">
                <label class="label" for="description">Beschreibung</label>
                <div class="control">
                    <textarea class="textarea" id="description" name="description" type="text" x-model="description"
                        maxlength="1000" required :disabled="upload_running"></textarea>
                </div>
                <p class="help">
                    Dieses Feld bestimmt, wie die Sendungsbeschreibung <b>öffentlich in der Mediathek</b> aussehen wird.
                    Soll
                    kein individueller Text eingeblendet werden, sondern nur der Standarttext des Formates, lass dieses
                    Feld leer. <b>Bitte keine Nachrichten an ALEX Mitarbeiter!</b> Nutze hierfür das Kommentarfeld.
                </p>
            </div>
            <div class="field">
                <label class="label" for="file">Datei</label>
                <div class="file has-name is-small is-fullwidth">
                    <label class="file-label">
                        <input class="file-input" id="file" name="file" type="file" x-model="file" accept=".mp3,.wav"
                            required :disabled="upload_running" />
                        <span class="file-cta">
                            <span class="file-icon is-small">
                                <i class="fas fa-upload"></i>
                            </span>
                            <span class="file-label">Datei auswählen</span>
                        </span>
                        <span class="file-name" x-text="get_file_name(file)"></span>
                    </label>
                </div>
                <p class="help">Lade hier deine Audiodatei der Sendung hoch. Bedenke bitte eine Länge von max. 59:30min
                    und die unterstützen Audioformate MP3 oder WAV. <i>Pflichtfeld.</i></p>
            </div>
            <div class="field">
                <label class="label" for="cover">Coverfoto</label>
                <div class="file has-name is-small is-fullwidth">
                    <label class="file-label">
                        <input class="file-input" id="cover" name="cover" type="file" x-model="cover"
                            accept=".jpg,.jpeg,.png" :disabled="upload_running" />
                        <span class="file-cta">
                            <span class="file-icon is-small">
                                <i class="fas fa-upload"></i>
                            </span>
                            <span class="file-label">Datei auswählen</span>
                        </span>
                        <span class="file-name" x-text="get_file_name(cover)"></span>
                    </label>
                </div>
                <p class="help">Sollte die Sendung eine individuelles Cover bekommen, gibt es hier die Möglichkeit ein
                    solches hochzuladen.
                    Das Seitenverhältnis muss 1:1 und die Auflösung mindestens 512 x 512 Pixel betragen.
                    Ignoriere es, damit wir das Standardbild des Formats beibehalten.
                </p>
            </div>
            <div class="field mb-5">
                <label class="label" for="comment">Kommentar</label>
                <div class="control">
                    <textarea class="textarea" id="comment" name="comment" type="text" x-model="comment"
                        maxlength="1000" :disabled="upload_running"></textarea>
                </div>
                <p class="help">Hier kann eine Nachricht an die Sendeabwicklung verfasst werden, sollte es Abweichungen
                    oder wichtige Kommentare geben.</p>
            </div>
            <div class="field mb-5" x-show="upload_running">
                <p class="label">Bitte warten, Upload läuft... <b>Seite nicht schließen.</b></p>
                <progress class="progress is-primary" :value="upload_progress" max="100"
                    x-text="`${upload_progress}%`"></progress>
                <p x-show="wait_for_server">Daten werden auf dem Server verarbeitet...</p>
            </div>
            <div class="field is-grouped">
                <div class="control">
                    <input class="button is-link" type="submit" />
                </div>
                <div class="control">
                    <button class="button is-link is-light" @click="reset()">Zurücksetzen</button>
                </div>
            </div>
        </form>
    </div>
</div>
{% endblock %}
{% block script_footer %}
<script>
    var glob_upload_running = false;
    function data() {
        return {
            data_loaded: false,
            fetch_error: null,
            fetch_error_detail: "",
            producer_name: "",
            producer_uuid: "{{producer_uuid}}",
            show: null,
            available_shows: {},
            datetime: {},
            title: null,
            description: null,
            file: null,
            cover: null,
            comment: "",
            form_data: {
                producer: "{{producer_uuid}}",
                show: null,
            },
            success: false,
            dev_mode: false,
            upload_running: false,
            upload_progress: 0,
            wait_for_server: false,
            maintenance_mode: false,
            maintenance_message: "",
            max_datetime: null,
            title_changed_manually: false,
            fetch_data() {
                fetch(`../api/producer_for_upload/${this.producer_uuid}`)
                    .then(res => {
                        if (!res.ok) {
                            this.fetch_error = res;
                        }
                        return res.json();
                    })
                    .then(data => {
                        if (this.fetch_error === null) {
                            this.data_loaded = true;
                            this.producer_name = data.producer_name;
                            this.available_shows = data.shows;
                            this.dev_mode = data.dev_mode;
                            this.maintenance_mode = data.maintenance_mode;
                            this.maintenance_message = data.maintenance_message;
                            window.addEventListener('beforeunload', this.confirm_close);
                            this.init_show_selection();
                            this.auto_set_title();
                        }
                        else if ("detail" in data) {
                            this.fetch_error_detail = data.detail;
                        }
                    });
            },
            // If only one show is available set this show as selected durin init. This is done so
            // that the title can be suggested automatically in this case.
            init_show_selection() {
                if (this.available_shows.length == 1) {
                    this.show = this.available_shows[0].uuid;
                }
            },
            // Tries to set the title based on the selected show and broadcast date. Once the user
            // has edited the title field themselves, the value will no longer be overwritten
            auto_set_title() {
                if (this.title_changed_manually || this.show === null) {
                    return;
                }
                let show_name = "";
                for (let i = 0; i < this.available_shows.length; i++) {
                    if (this.available_shows[i].uuid === this.show) {
                        show_name = this.available_shows[i].name;
                    }
                }
                if (Object.keys(this.datetime).length === 0) {
                    this.title = show_name;
                    return
                }
                const date = new Date(this.datetime);
                const day = String(date.getDate()).padStart(2, '0');
                const month = String(date.getMonth() + 1).padStart(2, '0');
                this.title = `${show_name} vom ${day}.${month}.${date.getFullYear()}`;
            },
            // Calculates the max value for the broadcast datetime field. 24h ago.
            get_min_datetime() {
                const now = new Date();
                var date = new Date(now.getTime() - (24 * 60 * 60 * 1000));
                return date.toISOString().slice(0, -8);
            },
            // Calculates the max value for the broadcast datetime field. Today plus one year.
            get_max_datetime() {
                if (this.max_datetime !== null) {
                    return this.max_datetime;
                }
                var date = new Date();
                date.setFullYear(date.getFullYear() + 1);
                this.max_datetime = date.toISOString().slice(0, -8);
                return this.max_datetime;
            },
            get_file_name(path) {
                if (path === null) {
                    return "";
                }
                const segments = path.split("\\");
                if (segments.length === 0) {
                    return "";
                }
                return segments[segments.length - 1];
            },
            upload() {
                event.preventDefault();
                const form = document.getElementById("form");

                const xhr = new XMLHttpRequest();
                var data = new FormData(form);
                data.append("producer", this.producer_uuid);

                xhr.upload.addEventListener("progress", (e) => {
                    this.upload_progress = (e.loaded / e.total) * 100;
                    if (this.upload_progress === 100) {
                        this.wait_for_server = true;
                    }
                });
                xhr.onreadystatechange = () => {
                    if (xhr.readyState === 1) {
                        this.upload_running = true;
                        glob_upload_running = true;
                    }
                    if (xhr.readyState === 4 && xhr.status === 200) {
                        this.reset();
                        this.success = JSON.parse(xhr.response).success;
                        this.upload_running = false;
                        glob_upload_running = false;
                        this.upload_progress = 0;
                        this.wait_for_server = false;
                        window.scrollTo(0, 0);
                    }
                };
                xhr.open("POST", `../api/upload/${this.producer_uuid}`, true);
                const file_name = data.get("file").name.replace(/[^\x00-\x7F]/g, "");
                xhr.setRequestHeader("file_name", file_name);
                xhr.send(data);
            },
            reset() {
                this.datetime = {};
                this.title = "";
                this.description = "";
                this.file = null;
                this.cover = null;
                this.comment = "";
            },
            test_fill() {
                let date = new Date();
                date.setDate(date.getDate() + 1);
                date.setHours(date.getHours() + 1);
                date.setMinutes(0);
                date.setSeconds(0);
                date.setMilliseconds(0);
                date_iso = date.toISOString();

                this.datetime = date_iso.substring(0, date_iso.length - 8);
                this.description = "(Testeintrag) Tauche ein in die elektrisierende Atmosphäre der angesagtesten Clubs und die neuesten Beats der elektronischen Musikszene. Unsere Radiosendung ist deine Eintrittskarte zu den heißesten Tracks, exklusiven Interviews mit aufstrebenden DJs und einem lebendigen Austausch über die Bedeutung von Clubkultur.";
                this.file = null;
                this.comment = "(Testeintrag) Bitte aktualisieren Sie die Access-Datenbank unter Berücksichtigung der aktuellen Anforderungen und Best Practices für Datenbankmanagement. Führen Sie eine gründliche Überprüfung der Datensätze durch, beseitigen Sie Redundanzen und Inkonsistenzen, optimieren Sie die Datenbankstruktur und dokumentieren Sie Ihre Änderungen.";
                this.auto_set_title();
            },
            confirm_close(event) {
                if (glob_upload_running) {
                    event.preventDefault();
                    event.returnValue("Der Upload ist noch nicht abgeschlossen. Bist du dir sicher, dass du den Upload abrechen möchtest?");
                }
            }
        }
    }
</script>
{% endblock %}